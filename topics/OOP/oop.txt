Opject-Oriented Programming (OOP) is a programming paradigm that uses "objects" to design applications and software. These objects are isntances of classes, which are essentially user-defined data types. In OOP, computer programed are designed by making them out of objects that interact with one another.


Main Concepts:


1) Classes and Objects
A class is a blueprint for creating objects. Objects are instances of a class, which holds variables and methods.

2) Inheritance
This is the process by which one class inherits the properties (methods and fields) of another. With the use of inheritance, the information is made manageable in a hierarchical order.

3) Encapsulation
This is the technique of making the fields in a class private and providing access to the fields via public methods. It increases security as the methods and variables of the class are hidden from other classes. 

4) Polymorphism
This allows methods to behave differently, based on the object that it is acting upon. This is usually  achieved by overloading methods for different inputs or by using inheritance and overriding methods. 

5) Abstraction
This is the process of hiding certain details and showing only essential information to the user. Abstraction can be achieved with either abstract classes or interfaces. 

6) Association
This is a relationship where all objects have their own life-cycle and there is no owner. Let's take an example of a Teacher and Student. Multiple students can associate with a single teacher and a single student can associate with multiple teachers, but there is no ownership between the objects and both have their own life-cycle. 

7) Aggregation
This is a specialized from of Association where all objects have their own life-cycle, but there is ownership, and child objects can not belong to another parent object. Let's take an example of Department and Teacher. A single teach can no belong to multiple departments, but if we delete the department, the teacher object will not be destroyed. 

8) Composition
This is a specialized form of Aggregation and we can call this as a "death" relationship. It is a strong type of Aggregation. Child object does not have its life-cycle and if parent object is deleted, all child objects will also be deleted. Let's take an example of a relationship between 
House and Rooms. House can contain multiple rooms- there is no independent life of room and any room can not belong to two different houses. If we delete the house, room will be automatically deleted. 
